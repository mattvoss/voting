/*! VotingApp - v0.1.0 - 2014-04-24 */$(window).resize(function () {
  //Politkz.vent.trigger('layout:resize');
});


ReplaceRegion = Marionette.Region.extend({
    open: function(view){
        this.$el.replaceWith(view.$el);
    }
});

Swag.registerHelpers(Handlebars);

// Use the router(s) for any internal (relative) links, unless it has a
// `data-bypass` attribute or is `target=_blank`
$(document).on('click', 'a:not([data-bypass],[target])', function(evt) {
    var href = $(this).attr('href'),
        protocol = this.protocol + '//';

    // For <a href="#"> links, we always want to preventDefault to avoid having to do
    // this within each individual Backbone View event function.
    // (However don't preventDefault on #something URLs in case we need to jump down a page.)
    if (href === '#') {
        evt.preventDefault();
    }

    // Don't break cmd-click (windows: ctrl+click) opening in new tab
    if (evt.metaKey || evt.ctrlKey) {
        return;
    }

    // Ensure the protocol is not part of URL, meaning it's relative.
    // We also don't want to do anything with links that start with "#" since we use push state
    if (href && href.slice(0, protocol.length) !== protocol &&
        href.indexOf('#') !== 0 &&
        href.indexOf('javascript') !== 0 &&
        href.indexOf('mailto:') !== 0 &&
        href.indexOf('tel:') !== 0
       ) {
        // Stop the default event to ensure the link will not cause a page
        // refresh.
        evt.preventDefault();

        // `Backbone.history.navigate` is sufficient for all Routers and will
        // trigger the correct events. The Router's internal `navigate` method
        // calls this anyways.
        Backbone.history.navigate(href, { trigger: true });
    }
});

//  format an ISO date using Moment.js
//  http://momentjs.com/
//  moment syntax example: moment(Date("2011-07-18T15:50:52")).format("MMMM YYYY")
//  usage: {{dateFormat creation_date format="MMMM YYYY"}}
Handlebars.registerHelper('dateFormat', function(context, block) {
  if (window.moment && context !== null) {
    var f = block.hash.format || "MMM Do, YYYY";
    //return moment(context.replace("Z","")).format(f);
    return moment(context).format(f);
  }else{
    return context;   //  moment plugin not available. return data as is.
  }
});

// usage: {{fromNow date}}
Handlebars.registerHelper('fromNow', function(date) {
    return moment(date).fromNow();
});


// Comparison Helper for handlebars.js
// Pass in two values that you want and specify what the operator should be
// e.g. {{#compare val1 val2 operator="=="}}{{/compare}}

Handlebars.registerHelper('compare', function(lvalue, rvalue, options) {

    if (arguments.length < 3)
        throw new Error("Handlerbars Helper 'compare' needs 2 parameters");

    operator = options.hash.operator || "==";

    var operators = {
          '==':       function(l,r) { return l == r; },
          '===':      function(l,r) { return l === r; },
          '!=':       function(l,r) { return l != r; },
          '<':        function(l,r) { return l < r; },
          '>':        function(l,r) { return l > r; },
          '<=':       function(l,r) { return l <= r; },
          '>=':       function(l,r) { return l >= r; },
          'typeof':   function(l,r) { return typeof l == r; }
        };

    if (!operators[operator])
        throw new Error("Handlerbars Helper 'compare' doesn't know the operator "+operator);

    var result = operators[operator](lvalue,rvalue);

    if( result ) {
        return options.fn(this);
    } else {
        return options.inverse(this);
    }
});

Handlebars.registerHelper('each_with_index', function(context, options) {
  var fn = options.fn, inverse = options.inverse;
  var i = 0, ret = "", data;

  var type = toString.call(context);

  if (options.data) {
    data = Handlebars.createFrame(options.data);
  }

  if(context && typeof context === 'object') {
    if(context instanceof Array){
      for(var j = context.length; i<j; i++) {
        if (data) { data.index = i; }
        ret = ret + fn(context[i], { data: data });
      }
    } else {
      for(var key in context) {
        if(context.hasOwnProperty(key)) {
          if(data) { data.key = key; data.index = i; }
          ret = ret + fn(context[key], {data: data});
          i++;
        }
      }
    }
  }

  if(i === 0){
    ret = inverse(this);
  }

  return ret;
});


Handlebars.registerHelper('iter', function(context, options) {
    var fn = options.fn, inverse = options.inverse;
    var ret = "";

    if(context && context.length > 0) {
        for(var i=0, j=context.length; i<j; i++) {
            ret = ret + fn(_.extend({}, context[i], { i: i, iPlus1: i + 1 }));
        }
    } else {
        ret = inverse(this);
    }
    return ret;
});

function isNumber(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
}

function generateQuickGuid() {
    return Math.random().toString(36).substring(2, 15) +
        Math.random().toString(36).substring(2, 15);
}

;(function (root, factory) {
  "use strict";
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['marionette','jquery','underscore'], factory);
  } else {
    // Browser globals
    root.Marionette.FormView = factory(root.Marionette,root.jQuery,root._);
  }
}(this, function (Marionette,$,_) {
  "use strict";

  /**
   * FormView Extension of Backbone.Marionette.ItemView
   *
   * @param {Object} options                   Options defining this FormView
   * @param {Object} [options.data]            Form Data. (Required if options.model is not set)
   * @param {object} [options.schema]
   *
   */
  var FormView = Marionette.FormView = Marionette.ItemView.extend({

    className : "formView",

    rules   : {}, //Custom Field Validation Rules

    constructor : function(){
      Marionette.ItemView.prototype.constructor.apply(this, arguments);

      //Allow Passing In Fields by extending with a fields hash
      if (!this.model) throw new Error("A Model Must Be Provided");

      //Attach Events to preexisting elements if we don't have a template
      if (!this.template) this.runInitializers();
      this.on('item:rendered',this.runInitializers, this);
    },

    populateFields : function () {
      var Form = Backbone.Form.extend({
            schema: this.options.schema
          });

      this.form = new Form({
        model: this.model
      }).render();

      this.$el.append(this.form.el);
    },

    beforeFormSubmit : function (e) {
      var errors = this.form.commit(); // runs schema validation
    },


    submit : function () {
      this.form.submit();
    },

    bindFormEvents : function() {
      var form = this.form;
      this.model.on('change:name', function(model, name) {
          form.setValue({ name: name });
      });
    },

    runInitializers : function() {
      this.populateFields();
      this.bindFormEvents();
      if (_.isFunction(this.onReady)) this.onReady();
    }
  });


  return FormView;
}));

var Voting = new Backbone.Marionette.Application();

var ModalRegion = Backbone.Marionette.Region.extend({
  el: "#modal",

  constructor: function(){
    _.bindAll( this, "getEl", "showModal", "hideModal" );
    Backbone.Marionette.Region.prototype.constructor.apply(this, arguments);
    this.listenTo(this, "show", this.showModal, this);
  },

  getEl: function(selector){
    var $el = $(selector);
    $el.attr("class","modal fade");
    $el.on("hidden", this.close);
    return $el;
  },

  showModal: function(view){
    this.listenTo(view, "close", this.hideModal, this);
    this.$el.modal('show');
  },

  hideModal: function(){
    this.$el.modal('hide');
  }
});

Voting.addRegions({
  body: '#body'
});

Voting.on('initialize:before', function() {
  this.collections = {};
});

Voting.on('initialize:after', function() {
  this.currentView = null;
  this.review = false;
  Backbone.history.start({root: "/", pushState: true});
  if (typeof this.voter !== 'undefined' && "id" in this.voter) {
    Backbone.history.navigate("siteid", { trigger: true });
  } else {
    Backbone.history.navigate("start", { trigger: true });
  }
});

String.prototype.capitalize = function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
};

Voting.module('Public', function(Public, App, Backbone, Marionette, $, _) {

  // Public Router
  // ---------------
  //
  // Handle routes to show the active vs complete todo items

  Public.Router = Marionette.AppRouter.extend({
    appRoutes: {
      'start': 'start',
      'logout': 'logout'
    }
  });

  // Public Controller (Mediator)
  // ------------------------------
  //
  // Control the workflow and logic that exists at the application
  // level, above the implementation detail of views and models

  Public.Controller = function() {};

  _.extend(Public.Controller.prototype, {

    // Start the app by showing the appropriate views
    // and fetching the list of todo items, if there are any
    start: function() {
      App.voter = new App.Models.Voter();
      var options = {login: true};
      this.appBody = new App.Layout.Body(options);
      App.body.show(this.appBody);
      this.showPublic();
    },

    showHeader: function(options) {
      options = options || {};
      var header = new App.Layout.Header(options);
      this.appBody.header.show(header);
      this.appBody.header.$el.show();
    },

    showFooter: function() {
      var footer = new App.Layout.Footer();
      this.appBody.footer.show(footer);
      this.appBody.footer.$el.show();
    },

    showPublic: function() {
      var view = new Public.Views.PublicView();
      this.appBody.login.show(view);
      this.appBody.login.$el.show();
    },

    logout: function() {
        App.voter.destroy();
        Backbone.history.navigate("start", { trigger: true });
    }

  });

  // Public Initializer
  // --------------------
  //
  // Get the Public up and running by initializing the mediator
  // when the the application is started.

  Public.addInitializer(function() {

    var controller = new Public.Controller();
    new Public.Router({
      controller: controller
    });

  });

});

Voting.module('SiteId', function(SiteId, App, Backbone, Marionette, $, _) {

  // SiteId Router
  // ---------------
  //
  // Handle routes to show the active vs complete todo items

  SiteId.Router = Marionette.AppRouter.extend({
    appRoutes: {
      'siteid'      : 'init',
      'voter-type'  : 'voterType',
      'voter-type-prev'  : 'voterTypePrev'
    }
  });




  // SiteId Controller (Mediator)
  // ------------------------------
  //
  // Control the workflow and logic that exists at the application
  // level, above the implementation detail of views and models

  SiteId.Controller = function() {};

  _.extend(SiteId.Controller.prototype, {

    init: function() {
      if (typeof App.voter == 'undefined') {
        Backbone.history.navigate("start", { trigger: true });
      } else {
        var options = {login: true};
        this.appBody = new App.Layout.Body(options);
        App.body.show(this.appBody);
        this.showSiteId();
      }
    },

    showSiteId: function() {
      var siteIdView = new SiteId.Views.SiteIdView({model: App.voter});
      this.appBody.login.show(siteIdView);
      this.appBody.login.$el.show();
      //$("#dash-container").show();
    },

    voterType: function() {
      var management = _.where(App.voter.get("site").get("voters").toJSON(), {voterType: "management"}),
          nonmanagement = _.where(App.voter.get("site").get("voters").toJSON(), {voterType: "non-management"});

      App.voter.set({
        management: management,
        nonmanagement: nonmanagement
      });

      var voterTypeView = new SiteId.Views.VoterTypeView({model: App.voter, collection: App.voter.get("site").get("voters")});
      this.appBody.login.show(voterTypeView);
      //this.appBody.login.$el.show();
      //$("#dash-container").show();
    },

    voterTypePrev: function() {
      var options = {login: true};
      this.appBody = new App.Layout.Body(options);
      App.body.show(this.appBody);
      this.voterType();
    }

  });

  // SiteId Initializer
  // --------------------
  //
  // Get the SiteId up and running by initializing the mediator
  // when the the application is started.

  SiteId.addInitializer(function() {

    var controller = new SiteId.Controller();
    new SiteId.Router({
      controller: controller
    });

    controller.init();

  });

});

Voting.module('Vote', function(Vote, App, Backbone, Marionette, $, _) {

  // Vote Router
  // ---------------
  //
  // Handle routes to show the active vs complete todo items

  Vote.Router = Marionette.AppRouter.extend({
    appRoutes: {
      'vote/:electionId'      : 'init',
      'review'                : 'showReview'
    }
  });




  // Vote Controller (Mediator)
  // ------------------------------
  //
  // Control the workflow and logic that exists at the application
  // level, above the implementation detail of views and models

  Vote.Controller = function() {};

  _.extend(Vote.Controller.prototype, {

    init: function(id) {
      if (typeof App.voter == 'undefined') {
        Backbone.history.navigate("start", { trigger: true });
      } else if (typeof id == 'undefined') {
        Backbone.history.navigate("voter-type", { trigger: true });
      } else {
        var options = {login: false};
        this.appBody = new App.Layout.Body(options);
        App.body.show(this.appBody);
        this.showHeader();
        this.showVote(id);
      }
    },

    showVote: function(id) {
      var model = Voting.offices.findWhere({"id": parseInt(id, 10)}),
          noneAbove = model.get("candidates").findWhere({"id": 0});
      if (typeof noneAbove == "undefined") {
        model.get("candidates").add([{
          "id": 0,
          "electionid": model.get("id"),
          "position": model.get("candidates").length + 1,
          "name": "None of the Above"
        }]);
      }
      var voteView = new Vote.Views.VoteView({model: model, collection: model.get("candidates")});
      $("#main").addClass("dashboard");
      this.appBody.main.show(voteView);
      $("body").removeClass();
    },

    showReview: function() {
      var reviewView = new Vote.Views.ReviewView({model: App.voter, collection: App.voter.get("votes")});
      this.appBody.main.show(reviewView);
      //this.appBody.login.$el.show();
      //$("#dash-container").show();
    },

    showHeader: function() {
      var header = new App.Layout.Header({model: App.voter});
      this.appBody.header.show(header);
    }

  });

  // Vote Initializer
  // --------------------
  //
  // Get the Vote up and running by initializing the mediator
  // when the the application is started.

  Vote.addInitializer(function() {

    var controller = new Vote.Controller();
    new Vote.Router({
      controller: controller
    });

    controller.init();

  });

});

Voting.module('Layout', function(Layout, App, Backbone, Marionette, $, _) {

  Layout.Body = Marionette.Layout.extend({
    initialize: function(options){
      this.options = _.extend({login: false}, options);
      var view = this;
      if (this.options.login) {
        this.addRegions({
          login: '#loginContainer'
        });
        this.template = Templates.bodyLogin;
      } else {
        this.addRegions({
          header: '#header',
          main: "#main",
          modal: ModalRegion
        });
        this.template = Templates.bodyMain;
        App.vent.on('layout:resize', function (bg) {
          //view.resize();
        });

      }
    },
    className: "appBodyContainer",
    // UI bindings create cached attributes that
    // point to jQuery selected objects
    ui: {

    },

    events: {

    },
    resize: function() {
      $("#sidebar").height($("#container").height());
    },

    onShow: function() {
      this.resize();
    }
  });

  Layout.Header = Marionette.ItemView.extend({
    initialize: function(options){
      this.opts = _.extend({light: false}, options);
    },
    template: Templates.header,
    className: "container-fluid",
    events: {
      "click a"         : "handleLink",
      "click .logout"   : "logout"
    },
    onRender: function() {
        /**
      if (this.opts.light) {
        this.$el.removeClass("navbar-inverse").addClass("navbar-default");
      } else {
        this.$el.removeClass("navbar-default").addClass("navbar-inverse");
      }
      **/
    },

    handleLink: function(e) {
        e.preventDefault();
        Backbone.history.navigate($(e.currentTarget).data().url, { trigger: true });

    },

    logout: function(e) {
      Backbone.history.navigate("/logout", { trigger: true });
    }
  });


});

Voting.module('Models', function(Models, App, Backbone, Marionette, $, _) {

  Models.Candidate = Backbone.SuperModel.extend({
    //urlRoot: '/api/registrant',
    idAttribute: "id",
    url: function() {
      return this.collection.office.url()+'/candidate';
    }
  });

  Models.Candidates = Backbone.Collection.extend({
    model: Models.Candidate,
    idAttribute: "id"
  });

  Models.Office = Backbone.SuperModel.extend({
    idAttribute: "id",
    name: 'office',
    relations: {
      'candidates': Models.Candidates
    },
    urlRoot: "/api/office/"
  });

  Models.Offices = Backbone.Collection.extend({
    model: Models.Office,
    idAttribute: "id"
  });

  Models.Vote = Backbone.SuperModel.extend({
    //urlRoot: '/api/registrant',
    idAttribute: "id",
    url: function() {
      return this.collection.voter.url()+'/vote';
    }
  });

  Models.Votes = Backbone.Collection.extend({
    model: Models.Vote,
    idAttribute: "id"
  });

  Models.Voter = Backbone.SuperModel.extend({
    urlRoot: '/api/voter',
    idAttribute: "registrantId",
    name: 'voter',
    relations: {
      'votes': Models.Votes
    },
    validate: function(attrs, options) {
      if (attrs.registrantid === "") {
        return {
          "error": "registrant",
          "message": "A registrant id must be entered"
        };
      }
    },
    initialize: function() {
      //if (this.isNew()) this.set('created', Date.now());
    }
  });

});

Voting.module('Public.Views', function(Views, App, Backbone, Marionette, $, _) {

  // Public View
  // --------------

  Views.AlertView = Marionette.ItemView.extend({
    template: Templates.alert,
    className: "alert alert-danger fade in",
  });

  Views.PublicView = Marionette.ItemView.extend({
      template: Templates.public,
      className: "row",
      events: {
        'keypress #registrantid'  :   'onInputKeypress',
        'click .next'             :   'logIn',
      },

      ui: {
        registrantid: '#registrantid'
      },

      initialize: function() {
        this.keyboardOpen = false;
      },

      onShow: function() {
        var view = this;
        this.ui.registrantid
        .keyboard({
            layout: 'custom',
            customLayout: {
             'default' : [
              'E G S {bksp}',
              '1 2 3',
              '4 5 6',
              '7 8 9',
              ' 0 ',
              '{accept} {cancel}'
             ]
            },
            openOn : null,
            stayOpen : true,
            css: {
              // input & preview
              input: '',
              // keyboard container
              container: 'center-block dropdown-menu', // jumbotron
              // default state
              buttonDefault: 'btn btn-default',
              // hovered button
              buttonHover: 'btn-primary',
              // Action keys (e.g. Accept, Cancel, Tab, etc);
              // this replaces "actionClass" option
              buttonAction: 'active',
              // used when disabling the decimal button {dec}
              // when a decimal exists in the input area
              buttonDisabled: 'disabled'
            }
        });

        $('.keyboard', this.$el).click(function(){
          if (view.keyboardOpen) {
            view.ui.registrantid.getkeyboard().close();
          } else {
            view.ui.registrantid.getkeyboard().reveal();
          }
          view.keyboardOpen = (view.keyboardOpen) ? false : true;
        });

        this.ui.registrantid.focus();
      },

      onInputKeypress: function(evt) {
        var ENTER_KEY = 13;

        if (evt.which === ENTER_KEY && this.ui.registrantid.val().length > 0) {
          evt.preventDefault();
          this.logIn(evt);
        }
      },

      showAlert: function(model) {
        var alert = new App.Public.Views.AlertView({model: model});
        $("#registrantid", this.$el).removeClass("alert-danger");
        $(".alert", this.$el).remove();
        alert.render();
        $("#"+model.get("error"), this.$el).addClass("alert-danger");
        $(alert.$el).insertBefore(".login-title", this.$el);
      },

      logIn: function(e) {
        var view = this;
        App.voter.set({
          id: this.ui.registrantid.val().trim()
        });
        if (App.voter.isValid()) {
          App.voter.urlRoot = "/api/authenticate";

          App.voter.save(
            {},
            {
              success: function(model, response, options) {
                //App.login.$el.hide();
                App.voter.urlRoot = "/api/voter";
                Backbone.history.navigate("siteid", { trigger: true });
              },
              error: function(model, xhr, options) {
                var alertModel = new Backbone.Model({
                      'error': 'login',
                      'message': xhr.responseJSON.messsage.response
                    });
                alert = new App.Public.Views.AlertView({model: alertModel});
                $("#zipcode", view.$el).removeClass("alert-danger");
                $(".alert", view.$el).remove();
                alert.render();
                $(alert.$el).insertBefore(".login-title", this.$el);
              }
            }
          );
        } else {
          var model = new Backbone.Model(App.voter.validationError);
          this.showAlert(model);
        }
      },

      update: function() {

      }

  });

  // Application Event Handlers
  // --------------------------

});

Voting.module('SiteId.Views', function(Views, App, Backbone, Marionette, $, _) {

  // Public View
  // --------------

  Views.AlertView = Marionette.ItemView.extend({
    template: Templates.alert,
    className: "alert alert-danger fade in",
  });

  Views.SiteIdAddressView = Marionette.ItemView.extend({
      template: Templates.siteIdAddress,
      tagName: "address"
  });

  Views.SiteIdView = Marionette.ItemView.extend({
      template: Templates.siteId,
      className: "row",
      events: {
        'keypress #siteid'        :   'onInputKeypress',
        'click .next'             :   'next',
        'click .prev'             :   'prev',
        'typeahead:selected #siteid'        :    'onTypeaheadSelect'
      },

      ui: {
        siteid: '.siteid'
      },

      initialize: function() {
        this.keyboardOpen = false;
      },

      modelEvents: {
        "change": 'renderAddress'
      },

      onShow: function() {
        var view = this;
        this.setupTypeAhead();
      },

      setupTypeAhead: function() {
        var view = this;
        /**
        $('#siteid', this.$el).typeahead(
            {
                minLength: 2,
                highlight: true,
            },
            {
                name: "siteid",
                displayKey: 'siteId',
                source: function (query, cb) {
                  $.get('/api/siteid/'+query, {  }, function (data) {
                    return cb(data);
                  });
                },
                templates: {
                  empty: [
                    '<div class="empty-message">',
                    'No Site IDs matching your query could be found',
                    '</div>'
                  ].join('\n'),
                  suggestion: Templates.siteIdSuggestion
                }
            }
        );
        **/

        this.ui.siteid
        .keyboard({
            layout: 'custom',
            customLayout: {
             'default' : [
              '1 2 3',
              '4 5 6',
              '7 8 9',
              ' 0 ',
              '{bksp}',
              '{accept} {cancel}'
             ]
            },
            stayOpen : true,
            css: {
              // input & preview
              input: '',
              // keyboard container
              container: 'center-block dropdown-menu', // jumbotron
              // default state
              buttonDefault: 'btn btn-default',
              // hovered button
              buttonHover: 'btn-primary',
              // Action keys (e.g. Accept, Cancel, Tab, etc);
              // this replaces "actionClass" option
              buttonAction: 'active',
              // used when disabling the decimal button {dec}
              // when a decimal exists in the input area
              buttonDisabled: 'disabled'
            }
        })
        .autocomplete({
          source: function( request, response ) {
            $.get('/api/siteid/'+request.term, {  }, function (data) {

              response( $.map( data, function( item ) {
                return _.extend(
                  item,
                  {
                    label: item.siteId + " - " + item.company ,
                    value: item.siteId
                  }
                );
              }));
            });
          },
          minLength: 2,
          select: _.bind(this.onTypeaheadSelect, {view: this})
        })
        .addAutocomplete()
        .addTyping();

        $('.keyboard', this.$el).click(function(){
          if (view.keyboardOpen) {
            view.ui.siteid.getkeyboard().close();
          } else {
            view.ui.siteid.getkeyboard().reveal();
          }
          view.keyboardOpen = (view.keyboardOpen) ? false : true;
        });
      },

      renderAddress: function() {
        this.render();
        this.setupTypeAhead();
      },

      onTypeaheadSelect: function(e, data) {
        this.view.model.set({
          "site":data.item,
          "siteId": data.item.siteId
        });
      },

      onInputKeypress: function(evt) {
        var ENTER_KEY = 13;

        if (evt.which === ENTER_KEY && this.ui.siteid.val().length == 6) {
          evt.preventDefault();
          this.next(evt);
        }
      },

      showAlert: function(model) {
        var alert = new App.SiteId.Views.AlertView({model: model});
        $("#registrantid", this.$el).removeClass("alert-danger");
        $(".alert", this.$el).remove();
        alert.render();
        $("#"+model.get("error"), this.$el).addClass("alert-danger");
        $(alert.$el).insertBefore(".login-title", this.$el);
      },

      prev: function(e) {
        App.voter.destroy(
          {
            success: function(model, response, options) {
              Backbone.history.navigate("start", { trigger: true });
            },
            error: function(model, xhr, options) {

            }
          }
        );

      },

      next: function(e) {
        var view = this;
        App.voter.set({
          siteid: this.ui.siteid.val().trim()
        });
        if (App.voter.isValid()) {
          App.voter.urlRoot = "/api/voter/siteid";

          App.voter.save(
            {},
            {
              success: function(model, response, options) {
                //App.login.$el.hide();
                App.voter.urlRoot = "/api/voter";
                Backbone.history.navigate("voter-type", { trigger: true });
              },
              error: function(model, xhr, options) {
                var alertModel = new Backbone.Model({
                      'error': 'siteid',
                      'message': 'The Site ID entered does not match any on file'
                    });
                alert = new App.SiteId.Views.AlertView({model: alertModel});
                $("#siteid", view.$el).removeClass("alert-danger");
                $(".alert", view.$el).remove();
                alert.render();
                $(alert.$el).insertBefore(".login-title", this.$el);
              }
            }
          );
        } else {
          var model = new Backbone.Model(App.voter.validationError);
          this.showAlert(model);
        }
      },

      update: function() {

      }

  });

  Views.PreviousVotersView = Marionette.ItemView.extend({
      template: Templates.previousVoter,
      tagName: "tr"
  });

  Views.VoterTypeView = Marionette.CompositeView.extend({
      template: Templates.voterType,
      itemView : Views.PreviousVotersView,
      itemViewContainer: ".voters",
      className: "row",
      events: {
        'keypress #siteid'        :   'onInputKeypress',
        'click .next'             :   'next',
        'click .prev'             :   'prev',
        'ifChecked input'         :   'checked'
      },

      ui: {
        votertype: '#votertype'
      },

      initialize: function() {

      },

      onShow: function() {
        if (this.collection.length === 0) {
          $(".voter-table", this.$el).hide();
          $(".voter-label", this.$el).hide();
        }

        $('input', this.$el).each(function(){
          var self = $(this),
            label = self.next(),
            label_text = label.text();

          label.remove();
          self.iCheck({
            checkboxClass: 'icheckbox_line-aero',
            radioClass: 'iradio_line-aero',
            insert: '<div class="icheck_line-icon"></div>' + label_text
          });
        });

      },

      onInputKeypress: function(evt) {
        var ENTER_KEY = 13;

        if (evt.which === ENTER_KEY && this.ui.registrantid.val().length > 0) {
          evt.preventDefault();
          this.next(evt);
        }
      },

      checked: function(e) {
        this.model.set({"voterType": $(e.currentTarget).val()});
        $(".next", this.$el).attr("disabled", false);
      },

      showAlert: function(model) {
        var alert = new App.SiteId.Views.AlertView({model: model});
        $("#registrantid", this.$el).removeClass("alert-danger");
        $(".alert", this.$el).remove();
        alert.render();
        $("#"+model.get("error"), this.$el).addClass("alert-danger");
        $(alert.$el).insertBefore(".login-title", this.$el);
      },

      prev: function(e) {
        Backbone.history.navigate("siteid", { trigger: true });
      },

      next: function(e) {
        var view = this;
        if (App.voter.isValid()) {
          App.voter.urlRoot = "/api/voter/voter-type";

          App.voter.save(
            {},
            {
              success: function(model, response, options) {
                //App.login.$el.hide();
                App.voter.urlRoot = "/api/voter";
                var office = App.offices.first();
                Backbone.history.navigate("vote/"+office.get("id"), { trigger: true });
              },
              error: function(model, xhr, options) {
                var alertModel = new Backbone.Model({
                      'error': 'login',
                      'message': 'The Registrant ID entered does not match any on file'
                    });
                alert = new App.SiteId.Views.AlertView({model: alertModel});
                $("#siteid", view.$el).removeClass("alert-danger");
                $(".alert", view.$el).remove();
                alert.render();
                $(alert.$el).insertBefore(".login-title", this.$el);
              }
            }
          );
        } else {
          var model = new Backbone.Model(App.voter.validationError);
          this.showAlert(model);
        }
      },

      update: function() {

      }

  });

  // Application Event Handlers
  // --------------------------

});

Voting.module('Vote.Views', function(Views, App, Backbone, Marionette, $, _) {

  // Vote View
  // --------------

  Views.CandidateView = Marionette.ItemView.extend({
      template: Templates.candidate,
      events: {
        'ifChecked input'         :   'checked'
      },

      modelEvents: {
        'change': 'fieldsChanged'
      },

      initialize: function() {
        //if (this.model.get("id")) this.model.set({uuid: this.model.get("id")});
        //this.justUpdated = false;
      },

      fieldsChanged: function() {
        //this.justUpdated = true;
        //this.render();
      },

      onShow: function(e) {
        $('input', this.$el).each(function(){
          var self = $(this),
            label = self.next(),
            label_text = label.text();

          label.remove();
          self.iCheck({
            checkboxClass: 'icheckbox_line-aero',
            radioClass: 'iradio_line-aero',
            insert: '<div class="icheck_line-icon"></div>' + label_text
          });
        });
      },

      checked: function(e) {

      }

  });

  Views.VoteView = Marionette.CompositeView.extend({
      template: Templates.office,
      itemView : Views.CandidateView,
      itemViewContainer: ".candidates",
      className: "col-md-12",

      events: {
        'click .next'             :   'next',
        'click .prev'             :   'prev',
        'ifChecked input'         :   'checked'
      },
      initialize: function() {
        this.vote = App.voter.get("votes").findWhere({"electionid": this.model.get("id")});
        if (typeof this.vote == "undefined") {
          this.candidateId = 0;
        } else {
          this.candidateId = this.vote.get("candidateid");
        }

      },

      onRender: function() {

      },

      onShow: function(e) {
        if (typeof this.vote !== "undefined") {
          $('#candidate'+this.vote.get("candidateid"), this.$el).iCheck('check');
          $(".next", this.$el).attr("disabled", false);
        }
      },

      checked: function(e) {
        this.candidateId = parseInt($(e.currentTarget).val(), 10);
        $(".next", this.$el).attr("disabled", false);
      },

      next: function(e) {
        var view = this,
            candidate = this.model.get("candidates").findWhere({"id": this.candidateId});

        if (typeof this.vote == "undefined") {
          App.voter.get("votes").add([{
            "siteid": App.voter.get("siteId"),
            "registrantid": App.voter.get("registrantId"),
            "electionid": this.model.get("id"),
            "candidateid": this.candidateId,
            "votertype": App.voter.get("voterType"),
            "electionTitle": this.model.get("title"),
            "candidateName": candidate.get("name"),
            "candidateCompany": candidate.get("company")
          }]);
        } else {
          this.vote.set({
            "candidateid": this.candidateId,
            "candidateName": candidate.get("name")
          });
        }

        if ((App.voter.get("votes").length == App.offices.length) || App.review) {
          App.review = false;
          Backbone.history.navigate("review", { trigger: true });
        } else {
          var index = App.offices.indexOf(this.model),
              nextOffice = App.offices.at(index+1);
          Backbone.history.navigate("vote/"+nextOffice.get("id"), { trigger: true });
        }
      },

      prev: function(e) {
        var index = App.offices.indexOf(this.model);
        App.review = false;
        if (index === 0) {
          Backbone.history.navigate("voter-type-prev", { trigger: true });
        } else {
          var prevOffice = App.offices.at(index-1);
          Backbone.history.navigate("vote/"+prevOffice.get("id"), { trigger: true });
        }
      }

  });

  Views.ReviewVoteView = Marionette.ItemView.extend({
      template: Templates.reviewVote,
      tagName: "tr",
      events: {
        'click .change-vote'             :   'changeVote',
        'ifChecked input'                :   'checked'
      },

      modelEvents: {
        'change': 'fieldsChanged'
      },

      initialize: function() {
        //if (this.model.get("id")) this.model.set({uuid: this.model.get("id")});
        //this.justUpdated = false;
      },

      fieldsChanged: function() {
        //this.justUpdated = true;
        //this.render();
      },

      changeVote: function(e) {
        App.review = true;
        Backbone.history.navigate("vote/"+this.model.get("electionid"), { trigger: true });
      },

      onShow: function(e) {

      },

      checked: function(e) {

      }

  });


  Views.ReviewView = Marionette.CompositeView.extend({
      template: Templates.review,
      itemView : Views.ReviewVoteView,
      itemViewContainer: ".votes",
      className: "col-md-12",

      events: {
        'click .next'             :   'next',
        'click .prev'             :   'prev',
        'click .up'               :   'scrollUp',
        'click .down'             :   'scrollDown'
      },
      initialize: function() {
        this.scrolled = 0;
      },

      onRender: function() {

      },

      onShow: function(e) {
        $('.vote-table').fixedHeaderTable({ height: 200 });
      },

      scrollUp: function(e) {
        var view = this;
        this.scrolled -= (this.scrolled >= 50) ? 50 : 0;
        $(".fht-tbody", this.$el).stop().animate({
            scrollTop: view.scrolled
        });
      },

      scrollDown: function(e) {
        var view = this;
        this.scrolled += 50;
        $(".fht-tbody", this.$el).stop().animate({
            scrollTop: view.scrolled
        });
      },

      next: function(e) {
        var view = this;


        if (App.voter.get("votes").length == App.offices.length) {
          Backbone.history.navigate("review", { trigger: true });
        } else {
          var index = App.offices.indexOf(this.model),
              nextOffice = App.offices.at(index+1);
          Backbone.history.navigate("vote/"+nextOffice.get("id"), { trigger: true });
        }
      },

      prev: function(e) {
        Backbone.history.navigate("voter-type-prev", { trigger: true });
      }

  });


  // Application Event Handlers
  // --------------------------


});
